//make the icons display, increment, and select the deck
const card = document.getElementsByClassName('card');
let cards = [...card];
const deck = document.querySelector('.deck');

//declare moves
let moves = 0;
let counter = document.querySelector('.moves');

//declare variable of matchedCards
let matchedCard = document.getElementsByClassName('match');
let openedCards = [];

//timer
var timer = document.querySelector('.timer'); 

//Modal 
let congratsMessage = document.querySelector('.congratsMessage');

//----------make the cards show-------------------------

//add event listeners for each card in the cards array
cards.forEach((card) => {
    card.addEventListener('click', revealSymbol);
})

//------------shuffle-------------

//provided shuffle function
const shuffle = (array) => {
    var currentIndex = array.length, temporaryValue, randomIndex;
    while (currentIndex !== 0) {
        randomIndex = Math.floor(Math.random() * currentIndex);
        currentIndex -= 1;
        temporaryValue = array[currentIndex];
        array[currentIndex] = array[randomIndex];
        array[randomIndex] = temporaryValue;
    }
    return array;
}

//this is the cards array shuffled
var shuffledCards = shuffle(cards);

//make the shuffled cards appear in the DOM
const fullShuffle = () => {
    for (var i = 0; i < shuffledCards.length; i++){
        //replace all of the cards in the cards array with the shuffled version
        cards.forEach.call(shuffledCards, (card) => {
            deck.appendChild(card); 
        });
    }
}

//make fullshuffle run when the game starts
window.onload = fullShuffle();

//--------matching the cards------------------

//matching algorithm
let faceUp = false;
let firstCard; 
let secondCard;

//if there is a match
const showMatch = () => {
    firstCard.classList.add('match');
    firstCard.classList.add('turnedOff');
    secondCard.classList.add('match');
    secondCard.classList.add('turnedOff');
}

//if there is not a match
const wrongChoice = () => {
    //make cards flash red
    firstCard.classList.add('noMatch');
    firstCard.classList.add('turnedOff');
    secondCard.classList.add('noMatch');
    secondCard.classList.add('turnedOff');
    //remove red flash and hide cards again
    setTimeout(() => {
        firstCard.classList.remove('noMatch');
        firstCard.classList.remove('turnedOff');
        secondCard.classList.remove('noMatch');
        secondCard.classList.remove('turnedOff');
        firstCard.classList.remove('show');
        firstCard.classList.remove('open');
        secondCard.classList.remove('show');
        secondCard.classList.remove('open');
    }, 500);
    //remove from the array
    openedCards.pop();
    openedCards.pop();
}

//disable clicked cards
const totalDisable = () => {
    cards.forEach((card) => {
        card.classList.add('turnedOff');
    });
}

//flipping card and matching algorithm
function revealSymbol() {
    //to add classes to selected cards and flip
    this.classList.toggle('open');
    this.classList.toggle('show');
    //add the selected cards to the opened card array
    openedCards.push(this);

    //specify the first card
    if (!faceUp) {
        faceUp = true;
        firstCard = this;
    //specify the second card
    } else {
        faceUp = false;
        secondCard = this;
        // if the image on the cards match
        //https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes
        if (firstCard.dataset.image == secondCard.dataset.image) {
            showMatch();
        }
        //if they dont match 
        else {
            wrongChoice();
        }
    }
    countMoves(false);
    youWin();
}



// ------------- Count all of the Moves -------------

const countMoves = (reset) => {
    if (!reset) {
        moves++;
    } counter.innerHTML = moves;
    if(moves == 1){
        startClock();
    }
    
    rating();

    //restart the game
    let restart = document.querySelector('.restart');

    restart.addEventListener('click', () => {
        //relaunch the game by reloading the page from the cashe
        //https://www.w3schools.com/jsref/met_loc_reload.asp
        location.reload();
        moves = 0;
        seconds = 0;
        minutes = 0;
        rating();
        countMoves(true);
    });
}

//---- Stop Watch----------------

var minutes = 0;
var seconds = 0;
var intervalID = 0;

//launch the stopwatch
function startClock() {
    intervalID = setInterval(() => {
        if(seconds==60) {
            minutes = minutes +1;
            seconds = 0;
        } else {
            seconds++;
        }
        timer.innerHTML = `${minutes} Minutes ${seconds} Seconds`;    
    },1000);
}

/*------------------ make the stars decrease-----------*/

const starsContainer = document.querySelector('.stars');
const rating = () => {
    if(moves>0 && moves<17){
        starsContainer.innerHTML = `<li><i class='fa fa-star'></i></li>
        <li><i class='fa fa-star'></i></li><li><i class='fa fa-star'></i></li>`;
    } if(moves>16 && moves<24){
        starsContainer.innerHTML = `<li><i class='fa fa-star'></i></li>
        <li><i class='fa fa-star'></i></li>`;
    } if (moves>24){
        starsContainer.innerHTML = `<li><i class='fa fa-star'></i></li>`;
    }
}

//-----------Modal---------------------

let endTime = timer.innerHTML;
let finishStars = starsContainer.innerHTML;
const modal = document.getElementById('myModal');
const modalContent = document.querySelector('p').innerHTML;
const closeModal = document.getElementsByClassName('close')[0];

// Close the modal when the X is clicked
//https://www.w3schools.com/howto/howto_css_modals.asp
closeModal.onclick = () => {
    modal.style.display = 'none';
}

//if they click outside of the box close the modal
window.onclick = (event) => {
  if (event.target == modal){
    modal.style.display = 'none';
  }
}

//You win
const youWin = () => {
  if(openedCards.length === 16){
    endTime = timer.innerHTML;
    finishStars = starsContainer.innerHTML;
    modal.style.display = 'block';
    congratsMessage.innerHTML = `Congratulations! You made ${moves} moves in ${endTime}. Your final rating is ${finishStars} Click restart to play again!`;
    //disable all of the card flips
    totalDisable();
    //disable the clock
    stopClock();
    }
}

const stopClock = () => {
    clearInterval(intervalID);
}
